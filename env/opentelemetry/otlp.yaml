receivers:
  otlp:
    protocols:
      grpc:
      http:
  # receiver that's just a dummy and never used; added to pass validation requiring at least one receiver in a pipeline.
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: "0.0.0.0:12345"

processors:
  batch:
    send_batch_size: 10000
    timeout: 1s
  spanmetrics:
    metrics_exporter: otlp/spanmetrics
    dimensions:
      - name: http.method
      - name: http.status_code
  filter/spanmetrics:
    metrics:
      exclude:
        match_type: expr
        expressions:
          - MetricName == "latency" && Label("span.kind") != "SPAN_KIND_SERVER"
          - MetricName == "calls_total" && Label("span.kind") != "SPAN_KIND_SERVER"
  tail_sampling:
    decision_wait: 3s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies: [
      {
        name: ignore-health-check-requests,
        type: string_attribute,
        string_attribute: { key: http.user_agent, values: [ kube-probe/* ], enabled_regex_matching: true, invert_match: true }
      },
    ]

exporters:
  otlp/jaeger:
    endpoint: $JAEGER_OTLP_ENDPOINT
    tls:
      insecure: true
  otlp/spanmetrics:
    endpoint: "localhost:4317"
    tls:
      insecure: true
  prometheusremotewrite:
    endpoint: http://$PROMETHEUS_PUSHGATEWAY_ENDPOINT/api/v1/write
    external_labels:
      otelcol: $POD_NAME
  logging:
    loglevel: debug
    sampling_initial: 2
    sampling_thereafter: 500

extensions:
  health_check:
    endpoint: "0.0.0.0:13133"

service:
  telemetry:
    metrics:
      address: ":8888"
    logs:
      level: debug
  extensions: [ health_check ]
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ spanmetrics, tail_sampling ]
      exporters: [ otlp/jaeger ]
    metrics/spanmetrics:
      receivers: [ otlp/spanmetrics ]
      exporters: [ otlp/spanmetrics ]
    metrics:
      receivers: [ otlp ]
      processors: [ filter/spanmetrics ]
      exporters: [ logging, prometheusremotewrite ]
